2. 两数相加
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode node(0);
        ListNode *parent=&node;
        int flag=0;
        while(l1||l2||flag)//有一个点就是加到最后两位flag为1还是要再进一位的{
            int m=l1?l1->val:0;
            int n=l2?l2->val:0;
            if (l1) l1=l1->next;
            if (l2) l2=l2->next;
            int val=(m+n+flag)%10;//这里注意是%不是/
            flag=(m+n+flag)>9?1:0;//这里也可以改成m+n+flag/10
            ListNode* node=new ListNode(val); 
            parent->next=node;
            parent=node;  
        }
        return node.next;//注意这里是.next不是->next,因为node不是指针
        
        
    }
};

19. 删除链表的倒数第N个节点

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

/**遍历两次
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *node=new ListNode(0);
        node->next=head;
        ListNode*parent =head;
        int num=0;
        while(parent)
        {
            num++;
            parent=parent->next;
        }
        n=num-n+1;//n=4
        parent=node;
        for(int i=0;i<n-1;i++){//012
            parent=parent->next;
            
        }
        parent->next=parent->next->next;
        return node->next;
        
        
    }
};
***/
//快慢指针
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *node=new ListNode(0);
        node->next=head;
        ListNode *fast=node;
        ListNode *slow=node;
        for(int i=0;i<n;i++)
        {
            fast=fast->next;
        }
        while(fast->next!=NULL){
            fast=fast->next;
            slow=slow->next;
        }
        slow->next=slow->next->next;
        return node->next;
        
        
    }
};

21. 合并两个有序链表
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-two-sorted-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/***
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* node=new ListNode(0);
        ListNode* curr=node;

        while(l1||l2){
            int m=l1?l1->val:INT_MAX;
            int n=l2?l2->val:INT_MAX;
            
            curr->next=(m<n)?l1:l2;
            curr=curr->next;
            if(m<n) 
                l1=l1->next;
            else l2=l2->next;
            
            }
        return node->next;
    }
};

***/
//神一般的递归解法
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1||(l1&&l2)&&(l1->val>l2->val)) swap(l1,l2);
        if(l1) l1->next=mergeTwoLists(l1->next, l2);
        return l1;
        
    }
};

23. 合并K个排序链表
合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-k-sorted-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
       while(lists.size()>1){
           lists.push_back(mergeTwoLists(lists[0],lists[1]));
           lists.erase(lists.begin());
           lists.erase(lists.begin());
           }
       return lists.front();
        
    }
    ListNode* mergeTwoLists(ListNode* l1,ListNode* l2 ){
        if(!l1||l2&&l1->val>l2->val) swap(l1,l2);
        if(l1) l1->next=mergeTwoLists(l1->next,l2);
        return l1;
    }
};

24. 两两交换链表中的节点
给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

 

示例:

给定 1->2->3->4, 你应该返回 2->1->4->3.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

