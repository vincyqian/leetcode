94. 二叉树的中序遍历
给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-inorder-traversal
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
////错误提醒：void Traversal(TreeNode* root,vector<int>& vals)中vals压迫传地址引用不然不反回res

/**
//1 递归的方法
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> vals;
        if(!root) return vals;
        Traversal(root,vals); 
        return vals;
    }
    void Traversal(TreeNode* root,vector<int>& vals)
    {
        if(!root)   return;
        Traversal( root->left,vals);
        vals.emplace_back(root->val);
        Traversal( root->right,vals);
        
    }
};
**/
//2 用栈的方法

//用这个方法有比较奇怪的一点：node=s.top()->right;会报错
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> s;
        auto node=root;
        while(node!=nullptr||!s.empty()){

            while(node!=nullptr)  {
                s.push(node);
                node=node->left;
            } 
            if(!s.empty()){
                node=s.top();
                res.emplace_back(node->val);
                s.pop();
                node=node->right;
            }
        }
        
 
        return res;
    }
};
